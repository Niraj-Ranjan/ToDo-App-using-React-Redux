{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","_this$props","this","props","item","handleChange","handleSubmit","editItem","react_default","a","createElement","className","onSubmit","type","placeholder","aria-label","aria-describedby","value","onChange","Component","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","items","clearList","map","TodoItem_TodoItem","key","id","App","state","uuid","e","_this","setState","target","preventDefault","newItem","console","log","updatedItems","concat","Object","toConsumableArray","filterList","filter","selectedItem","find","TodoInput_TodoInput","TodoList_TodoList","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89f83381.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class TodoInput extends Component {\n    render() {\n        const {item, handleChange, handleSubmit, editItem} = this.props\n        return (\n            <div className=\"card card-body my-3\">\n                <form onSubmit={handleSubmit}>\n                    <div className=\"input-group mb-3\">\n                        <div className=\"input-group-prepend\">\n                            <span className=\"input-group-text bg-primary text-white\">\n                                <i className=\"fa fas fa-book\"></i>\n                            </span>\n                        </div>\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Enter Your Work\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"\n                            value = {item}\n                            onChange={handleChange}>\n                        </input>\n                    </div>\n                    <button type=\"submit\" className= {\n                        editItem ? \"btn btn-block btn-success mt-3\" : \"btn btn-block btn-primary mt-3\"\n                    }> \n                    {editItem ? \"Edit Task\" : \"Add Task\"} \n                       </button>\n                </form>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class TodoItem extends Component {\n    render() {\n        const {title, handleDelete, handleEdit} = this.props;\n        return (\n            <div className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\n                <h6>{title}</h6>\n                <div className=\"todo-icon\">\n                    <span className=\"mx-2 text-success\" onClick={handleEdit}>\n                        <i className=\"fa fas fa-edit\"></i>\n                    </span>\n                    <span className=\"mx-2 text-danger\" onClick={handleDelete}>\n                        <i className=\"fa fas fa-trash\"></i>\n                    </span>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\n\nexport default class TodoList extends Component {\n    render() {\n        const {items, clearList, handleDelete, handleEdit} = this.props;\n        return (\n            <ul className= \"list-group my-5\">\n                <h3 className=\"text-capitalize text-center\">\n                    ToDo List\n                </h3>\n                {\n                    items.map(\n                        item => {\n                            return ( <TodoItem \n                                    key={item.id} \n                                    title={item.title}\n                                    handleDelete={\n                                        () => handleDelete(item.id)\n                                    }\n                                    handleEdit = {\n                                        () => handleEdit(item.id)\n                                    }></TodoItem>)\n                        }\n                    )\n                }\n               \n                <button type=\"button\" className=\"btn btn-danger btn-block text-capitalize mt-5\"\n                onClick = {clearList}>Clear</button>\n\n            </ul>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport uuid from 'uuid';\n\nimport TodoInput from './components/TodoInput';\nimport TodoList from './components/TodoList';\n\nclass App extends React.Component{\n  state = {\n    items: [],\n    id: uuid(),\n    item: '',\n    editItem: false\n  };\n  handleChange = e => {\n    this.setState({\n      item: e.target.value\n      \n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const newItem = {\n      id: this.state.id,\n      title: this.state.item\n    }\n    console.log(newItem);\n\n    const updatedItems = [...this.state.items, newItem];\n    console.log(updatedItems);\n    this.setState({\n      items: updatedItems,\n      item: \"\",\n      id: uuid(),\n      editItem: false\n    });\n    \n  }\n\n  clearList = () =>{\n    this.setState({\n      items: []\n    });\n  }\n\n  handleDelete = id => {\n    const filterList = this.state.items.filter(item =>\n      item.id !==id\n    );\n    this.setState({\n      items: filterList\n    });\n\n  }\n\n  handleEdit = id => {\n    console.log(id);\n    const filterList = this.state.items.filter(item =>\n      item.id !==id\n    );\n\n    const selectedItem = this.state.items.find(item => item.id === id)\n    console.log(selectedItem);\n    \n    this.setState({\n      items: filterList,\n      item: selectedItem.title,\n      id: id,\n      editItem: \"true\"\n     \n    });\n\n    console.log(this.state.id);\n    console.log(this.state.editItem);\n    \n    \n\n  }\n  render(){\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className = \"col-10 mx-auto col-md-8 mt-4\">\n            <h3 className=\"text-capitalize text-center\">\n              To Do Input\n            </h3>\n            <TodoInput item = {this.state.item} handleChange = {this.handleChange} handleSubmit = {this.handleSubmit}\n             editItem = {this.state.editItem}></TodoInput>\n            <TodoList \n              items={this.state.items} \n              clearList = {this.clearList}\n              handleDelete={this.handleDelete}\n              handleEdit = {this.handleEdit}\n\n              ></TodoList>\n          </div>\n        </div>\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}